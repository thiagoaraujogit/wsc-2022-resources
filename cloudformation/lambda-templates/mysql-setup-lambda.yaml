AWSTemplateFormatVersion: 2010-09-09
Description: Lambda function to setup tables into database
  
Parameters:
  Network:
    Type: String
    Description: Network stack name  

  S3BucketName:
    Type: String
    Description: Bucket name (where lambda function is stored)
  
  S3FileLocation:
    Type: String
    Description: Lambda function path
  
  EnvironmentType:
    Type: String
    AllowedValues:
      - Prod 
      - Test
    
  SubnetPrefix:
    Type: String
    AllowedValues: 
      - Public
      - Private
  
  RDSSecretID:
    Description: RDS Secret Manager ID
    Type: String
   
  MySQLHost:
    Description: RDS MySQL Endpoint
    Type: String
  
  MySQLUser:
    Description: RDS MySQL Username
    Type: String
  
  MySQLDatabase:
    Description: MySQL Database Name
    Type: String 

  S3MySQLFile:
    Description: MySQL File inside S3 bucket
    Type: String

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: "Stack association"
      Parameters:
        - Network
    -
      Label:
        default: "Network properties"
      Parameters:
        - EnvironmentType
        - SubnetPrefix
    -
      Label:
        default: "RDS properties"
      Parameters:
        - MySQLHost
        - MySQLUser 
        - MySQLDatabase
        - S3MySQLFile
        - RDSSecretID
    -
      Label:
        default: "Bucket properties"
      Parameters:
        - S3BucketName
        - S3FileLocation

Resources:
  LambdaMySQLSetup:
    Type: "AWS::Lambda::Function"
    Properties:
      Code: #required
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3FileLocation
      Description: Setup database lambda function
      FunctionName: MySQL-SetupDatabase
      Environment:
        Variables:
          LOG_LEVEL: 10
          secret_properties: !Sub '{"sqlHost": "${MySQLHost}", "sqlUser": "${MySQLUser}", "sqlDatabase": "${MySQLDatabase}", "RDSSecretID": "${RDSSecretID}", "RegionName": "${AWS::Region}", "sqlFile": "${S3MySQLFile}", "S3Bucket": "${S3BucketName}"}'
      Handler: lambda_function.lambda_handler #required
      Role: !GetAtt MySQLSetupRole.Arn
      Runtime: python3.8 #required
      VpcConfig:
        SecurityGroupIds: 
          - Fn::ImportValue: !Sub ${Network}-AppSecurityGroup
        SubnetIds: 
          - Fn::ImportValue: !Sub ${Network}-${EnvironmentType}-${SubnetPrefix}-Subnet1
          - Fn::ImportValue: !Sub ${Network}-${EnvironmentType}-${SubnetPrefix}-Subnet2

  MySQLSetupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - cloudwatch:*
                  - s3:*
                  - logs:*
                  - ec2:*
                  - secretsmanager:*
                Resource: '*'
      RoleName: mysql-setup-role

Outputs:
  LambdaMySQLSetupName:
    Value: !Ref LambdaMySQLSetup
    Export:
      Name: !Sub ${AWS::StackName}-LambdaMySQLSetupName
  
  LambdaMySQLSetupARN:
    Value: !GetAtt LambdaMySQLSetup.Arn
    Export:
      Name: !Sub ${AWS::StackName}-LambdaMySQLSetupARN
  
  MySQLSetupRoleArn:
    Value: !GetAtt MySQLSetupRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-MySQLSetupRoleArn