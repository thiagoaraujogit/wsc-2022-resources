AWSTemplateFormatVersion: 2010-09-09
Description: ECS Cluster
  
Parameters:
  ELBStack:
    Description: Load balancer stack name
    Type: String

  NetworkStack:
    Description: Network stack name
    Type: String

  ClusterName:
    Description: ECS Cluster name
    Type: String

  ContainerName:
    Description: ECS Container name
    Type: String

  ServiceName:
    Description: ECS cluster service name
    Type: String

  ContainerPort:
    Description: ECS Container port
    Type: String
  
  # HostPort:
  #   Description: ECS Host port
  #   Type: String

  EnvironmentType:
    Description: Environment type (Production or Test)
    Type: String
    AllowedValues:
      - Prod
      - Test

  ECSRoleARN:
    Description: ECS role arn for task execution
    Type: String

  EC2InstanceProfile:
    Description: EC2 instance for EC2 permissions
    Type: String

  SubnetPrefix:
    Description: Subnets where containers will're stay
    Type: String
    AllowedValues:
      - Private
      - Public

  ContainerMemory:
    Type: String
  
  ContainerCPU:
    Type: String

  DockerImage:
    Description: Docker image (URI if image is on ECR repository)
    Type: String

  KeyName:
    Description: Key pair name
    Type: AWS::EC2::KeyPair::KeyName

  Version:
    Description: Application version
    Type: String
    Default: default

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: "Network - Properties"
      Parameters:
        - NetworkStack
    -
      Label:
        default: "Elastic Load Balancer - Properties"
      Parameters:
        - ELBStack
    -
      Label:
        default: "ECS - Properties"
      Parameters:
        - ClusterName
        - ServiceName
        - ContainerName
        - ContainerPort
        # - HostPort
        - ContainerMemory
        - ContainerCPU
        - DockerImage
        - ECSRoleARN
        - EC2InstanceProfile
        - KeyName
        - EnvironmentType
        - SubnetPrefix

Mappings:
  RegionMap:
    us-east-1:
      AMZLNX: ami-098616968d61e549e
    us-east-2:
      AMZLNX: ami-0c0415cdff14e2a4a

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Ref ClusterName

  ECSService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref ECSCluster
      DeploymentConfiguration: 
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 30
      LaunchType: EC2
      LoadBalancers: 
        - ContainerName: !Ref ContainerName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn:
            Fn::ImportValue: !Sub ${ELBStack}-ElbTargetGroup-ARN
      SchedulingStrategy: REPLICA
      ServiceName: !Ref ServiceName
      TaskDefinition: !Ref ECSTask

  ECSTask:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      ContainerDefinitions: 
        -
          Image: !Ref DockerImage
          Name: !Ref ContainerName
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              # HostPort: !Ref HostPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: ecs
      Cpu: !Ref ContainerCPU
      ExecutionRoleArn: !Ref ECSRoleARN
      Family: !Ref ContainerName
      Memory: !Ref ContainerMemory
      RequiresCompatibilities: 
        - EC2
      TaskRoleArn: !Ref ECSRoleARN

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ECS-${ClusterName}

  LaunchConfiguration:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/xvdcz
          Ebs:
            VolumeSize: 22
            VolumeType: gp2
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMZLNX]
      InstanceMonitoring: true
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      LaunchConfigurationName: !Join ['-',[!Ref EnvironmentType,'Application-LC']]
      SecurityGroups:
        - Fn::ImportValue: !Sub ${NetworkStack}-AppSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

  AutoScale:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: !Join ['-',[!Ref EnvironmentType,'Application-AS']]
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 2 #required
      MaxSize: 20
      Cooldown: 150
      # TargetGroupARNs:
      #   - Fn::ImportValue: !Sub ${ELBStack}-ElbTargetGroup-ARN
      TerminationPolicies:
        - OldestInstance
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${NetworkStack}-${EnvironmentType}-${SubnetPrefix}-Subnet1
        - Fn::ImportValue: !Sub ${NetworkStack}-${EnvironmentType}-${SubnetPrefix}-Subnet2
      Tags:
        - Key: Name
          Value: !Join ['-',['ECSContainer',!Ref Version]]
          PropagateAtLaunch: true

Outputs:
  AutoScale:
    Value: !Ref AutoScale
    Export:
      Name: !Sub "${AWS::StackName}-AutoScale"
  
  LaunchConfiguration:
    Description: Launch configuration logical id
    Value: !Ref LaunchConfiguration
    Export:
      Name: !Sub "${AWS::StackName}-LaunchConfiguration"

  CloudwatchLogsGroupID:
    Description: Cloudwatch logs group ID
    Value: !Ref CloudwatchLogsGroup
    Export:
      Name: !Sub ${AWS::StackName}-CloudwatchLogsGroupID
  
  CloudwatchLogsGroupARN:
    Description: Cloudwatch logs group ARN
    Value: !GetAtt CloudwatchLogsGroup.Arn
    Export:
      Name: !Sub ${AWS::StackName}-CloudwatchLogsGroupARN

  ECSTaskARN:
    Description: ECS Task ARN
    Value: !Ref ECSTask
    Export: 
      Name: !Sub ${AWS::StackName}-ECSTaskARN
  
  ECSServiceARN:
    Description: ECS Service ARN
    Value: !Ref ECSService
    Export:
      Name: !Sub ${AWS::StackName}-ECSServiceARN
  
  ECSServiceName:
    Description: ECS Service name
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub ${AWS::StackName}-ECSServiceName

  ECSClusterID:
    Description: ECS Cluster ID
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ECSClusterID

  ECSClusterARN:
    Description: ECS Cluster ARN
    Value: !GetAtt ECSCluster.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ECSClusterARN