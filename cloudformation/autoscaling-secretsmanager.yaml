AWSTemplateFormatVersion: 2010-09-09
Description: Application template (auto-scale, cloudwatch alarms and scale policies)

Parameters:
  Network:
    Type: String
    Description: Name of network stack with VPC and Subnets

  ElbStack:
    Type: String
    Description: Name of elastic load balancer stack

  EnvironmentType:
    Type: String
    Description: Environment type (Production or Test)
    AllowedValues:
      - Prod
      - Test

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName

  IAMRole:
    Type: String

  InstanceProfile:
    Type: String

  SubnetPrefix:
    Type: String
    Description: Subnets where auto-scale will create the instances
    Default: Private
    AllowedValues:
      - Public
      - Private

  BucketName:
    Type: String
    Description: Bucket name where is the application file

  FileName:
    Type: String
    Description: Path for application file (inside bucket)

  DesiredCapacity:
    Type: Number
    Description: Auto-Scale desired capacity
    Default: 2

  MaxBatchSize:
    Type: Number
    Description: Número de instâncias a serem atualizadas por vez
    Default: 2

  Version:
    Type: String
    Description: Application version

  AMZLNX:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: "Stack Association"
      Parameters:
        - Network
        - ElbStack
    -
      Label:
        default: "Enviroment Definition"
      Parameters:
        - EnvironmentType
    -
      Label:
        default: "Infrastructure Properties"
      Parameters:
        - SubnetPrefix
        - IAMRole
        - InstanceProfile
        - KeyName
        - DesiredCapacity
        - MaxBatchSize
    -
      Label:
        default: "Application Properties"
      Parameters:
        - Version
        - BucketName
        - FileName

Resources:
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Authentication:
        S3Access:
          type: S3
          roleName: !Ref IAMRole
          buckets:
            - !Ref BucketName

      AWS::CloudFormation::Init:
        configSets:
          default:
            - awslogs
            - hooks
            - server
            # - rsyslog

        awslogs:
          packages:
            yum:
              awslogs: []

          files:
            /etc/awslogs/config/cfn-init.conf:
              content: !Sub |
                [/var/log/cfn-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cfn-init.log
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = cfn-init_logs
              mode: "000644"
              owner: root
              group: root

            /etc/awslogs/config/cfn-hup.conf:
              content: !Sub |
                [/var/log/cfn-hup.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cfn-hup.log
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = cfn-hup_logs
              mode: "000644"
              owner: root
              group: root

            /etc/awslogs/config/server.conf:
              content: !Sub |
                [/home/ec2-user/app_logs]
                datetime_format = %b %d %H:%M:%S
                file = /home/ec2-user/app_logs
                buffer_duration = 5000
                log_stream_name = {instance_id}
                initial_position = start_of_file
                log_group_name = server_logs
              mode: "000644"
              owner: root
              group: root

            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000555'
              owner: root
              group: root 

          services:
            sysvinit:
              awslogsd:
                enabled: 'true'
                ensureRunning: 'true'
                packages:
                  yum:
                    - awslogs
                files:
                  - /etc/awslogs/config/cfn-init.conf
                  - /etc/awslogs/config/cfn-hup.conf
                  - /etc/awslogs/config/server.conf
                  - /etc/awslogs/awscli.conf

        hooks:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --stack ${AWS::StackName} --region ${AWS::Region} --resource LaunchConfig --configsets default
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"

            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                role=${IAMRole}
                interval=1
              mode: 000400
              owner: root
              group: root

          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"

        server:
          packages:
            yum:
              nfs4-acl-tools.x86_64: []
              jq: []
          
          files:
            /home/ec2-user/server.bin:
              source: !Sub https://${BucketName}.s3.${AWS::Region}.amazonaws.com/${FileName}
              mode: '000555'
              owner: root
              group: root 

            /home/ec2-user/server.ini.template:
              content: |
                "LogLocation" = "./"
                "RedisHost" = "test-redis-default.xamzfo.ng.0001.use1.cache.amazonaws.com"
                "RedisPort" = "6379"
                "MysqlHost" = "test-default-mysql.csqvxwala46t.us-east-1.rds.amazonaws.com"
                "MysqlPort" = "3306"
                "MysqlUser" = "root"
                "MysqlPass" = "${DBPASSWORD}"
                "MysqlDb" = "worldskills"
                "FsPath" = "/tmp/"
              mode: '000555'
              owner: root
              group: root 
            
            /etc/systemd/system/server.service:
              content: !Sub |
                [Unit]
                Description=Server application service.

                [Service]
                Type=simple
                WorkingDirectory=/home/ec2-user/
                ExecStart=/home/ec2-user/server.bin

                [Install]
                WantedBy=multi-user.target
              mode: '000555'
              owner: root
              group: root 
   
        # rsyslog:
        #   files:
        #     /etc/rsyslog.d/server.conf:
        #       content: !Sub |
        #         if $programname == 'server' then /home/ec2-user/server.log
        #         & stop
        #       mode: "000644"
        #       owner: root
        #       group: root

        #   services:
        #     sysvinit:
        #       rsyslog:
        #         enabled: 'true'
        #         ensureRunning: 'true'
        #         files:
        #           - /etc/rsyslog.d/server.conf

    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref AMZLNX
      InstanceMonitoring: true
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      LaunchConfigurationName: !Join ['-',[!Ref EnvironmentType,'Application-LC']]
      SecurityGroups:
        - Fn::ImportValue: !Sub ${Network}-AppSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -ex

            /opt/aws/bin/cfn-init --stack "${AWS::StackName}" --region "${AWS::Region}" --resource LaunchConfig
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --region ${AWS::Region} --resource AutoScale
            export DBPASSWORD=`aws secretsmanager get-secret-value --secret-id tMyRDSInstanceSecret-otXkNT5Czc0r --region us-east-1 --query 'SecretString' | jq fromjson.password -r`
            envsubst < /home/ec2-user/server.ini.template > /home/ec2-user/server.ini
            systemctl restart server

  AutoScale:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
      ResourceSignal:
        Count: !Ref DesiredCapacity
        Timeout: PT10M
    UpdatePolicy:
      # AutoScalingReplacingUpdate:
      #   WillReplace: 'true'
      AutoScalingRollingUpdate:
        MaxBatchSize: !Ref MaxBatchSize
        MinInstancesInService: 2
        MinSuccessfulInstancesPercent: 100
        PauseTime: PT1M30S
        WaitOnResourceSignals: 'true'
    Properties:
      TargetGroupARNs:
        - Fn::ImportValue: !Sub ${ElbStack}-ElbTargetGroup-ARN
        # - Fn::ImportValue: !Sub ${ElbStack}-ElbTargetGroup8080-ARN
      LaunchConfigurationName: !Ref LaunchConfig
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      MinSize: 2
      # DesiredCapacity: !Ref DesiredCapacity
      MaxSize: 20
      Cooldown: 150
      TerminationPolicies:
        - OldestInstance
      AutoScalingGroupName: !Sub ${EnvironmentType}-application-as
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${Network}-${EnvironmentType}-${SubnetPrefix}-Subnet1
        - Fn::ImportValue: !Sub ${Network}-${EnvironmentType}-${SubnetPrefix}-Subnet2
      Tags:
        - Key: Name
          Value: !Join ['-',['application',!Ref Version]]
          PropagateAtLaunch: true

  ScaleOutResponseTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      ActionsEnabled: true
      AlarmActions: 
        - !Ref ScaleOutPolicy
      Dimensions:
        - Name: LoadBalancer
          Value:
            Fn::ImportValue: !Sub ${ElbStack}-ElasticLoadBalancer-FullName
        - Name: TargetGroup
          Value:
            Fn::ImportValue: !Sub ${ElbStack}-ElbTargetGroup-FullName
      AlarmDescription: Scale-Out alarm based in target response time, if equal or greater than 4,5 create a instance
      AlarmName: Scale-Out3
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Period: 60
      ExtendedStatistic: p90
      Threshold: 5

  ScaleInResponseTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      ActionsEnabled: true
      AlarmActions: 
        - !Ref ScaleInPolicyResponseTime
      Dimensions:
        - Name: LoadBalancer
          Value:
            Fn::ImportValue: !Sub ${ElbStack}-ElasticLoadBalancer-FullName
        - Name: TargetGroup
          Value:
            Fn::ImportValue: !Sub ${ElbStack}-ElbTargetGroup-FullName
      AlarmDescription: Scale-In alarm based in target response time, if less than 4,5 remove a instance
      AlarmName: Scale-In3 (ResponseTime)
      ComparisonOperator: LessThanOrEqualToThreshold
      EvaluationPeriods: 1
      DatapointsToAlarm: 1
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Period: 60
      ExtendedStatistic: p90
      Threshold: 4.5

  ScaleInRequestCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      ActionsEnabled: true
      AlarmActions: 
        - !Ref ScaleInPolicyRequestCount
      Dimensions:
        - Name: LoadBalancer
          Value:
            Fn::ImportValue: !Sub ${ElbStack}-ElasticLoadBalancer-FullName
        - Name: TargetGroup
          Value:
            Fn::ImportValue: !Sub ${ElbStack}-ElbTargetGroup-FullName
      AlarmDescription: Scale-In alarm based in request count, if less than 0 remove a instance
      AlarmName: Scale-In3 (RequestCount)
      ComparisonOperator: LessThanOrEqualToThreshold
      EvaluationPeriods: 5
      DatapointsToAlarm: 5
      MetricName: RequestCount
      Namespace: AWS/ApplicationELB
      Period: 60
      Statistic: Sum
      Threshold: 0

  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScale
      PolicyType: StepScaling
      MetricAggregationType: Maximum
      EstimatedInstanceWarmup: 150
      StepAdjustments:
        -
          MetricIntervalLowerBound: '0'
          MetricIntervalUpperBound: '3'
          ScalingAdjustment: '1'
        -
          MetricIntervalLowerBound: '3'
          MetricIntervalUpperBound: '7'
          ScalingAdjustment: '2'
        -
          MetricIntervalLowerBound: '7'
          MetricIntervalUpperBound: '11'
          ScalingAdjustment: '3'
        -
          MetricIntervalLowerBound: '11'
          ScalingAdjustment: '4'
  
  ScaleInPolicyResponseTime:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScale
      PolicyType: StepScaling
      MetricAggregationType: Maximum
      EstimatedInstanceWarmup: 150
      StepAdjustments:
        -
          MetricIntervalLowerBound: '0'
          ScalingAdjustment: '-1'
  
  ScaleInPolicyRequestCount:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScale
      PolicyType: StepScaling
      MetricAggregationType: Maximum
      EstimatedInstanceWarmup: 150
      StepAdjustments:
        -
          MetricIntervalLowerBound: '0'
          ScalingAdjustment: '-1'

Outputs:
  AutoScale:
    Value: !Ref AutoScale
    Export:
      Name: !Sub "${AWS::StackName}-AutoScale"

  LaunchConfig:
    Description: LaunchConfig
    Value: !Ref LaunchConfig
    Export:
      Name: !Sub "${AWS::StackName}-LaunchConfig"