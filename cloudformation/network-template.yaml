AWSTemplateFormatVersion: 2010-09-09
Description: Network template with two options (Production or Test)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    -
      Label:
        default: "Network Properties"
      Parameters:
        - EnvironmentType
        - CidrNetwork
        - AZs

Parameters:
  CidrNetwork:
    Type: String
    Description: Network CIDR block
    Default: 192.168.0.0/16

  AZs:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: Availability zones to use in the infrastructure

  EnvironmentType:
    Type: String
    Description: Environment type (production or test)
    AllowedValues:
      - Test
      - Prod

Conditions:
  CreateResourcesProd: !Equals [!Ref EnvironmentType, Prod]
  CreateResourcesTest: !Equals [!Ref EnvironmentType, Test]

Resources:

#  _____               _            _   _             
# |  __ \             | |          | | (_)            
# | |__) | __ ___   __| |_   _  ___| |_ _  ___  _ __  
# |  ___/ '__/ _ \ / _` | | | |/ __| __| |/ _ \| '_ \ 
# | |   | | | (_) | (_| | |_| | (__| |_| | (_) | | | |
# |_|   |_|  \___/ \__,_|\__,_|\___|\__|_|\___/|_| |_|

# From here, resources are created for production

  MyVPC:
    Type: AWS::EC2::VPC
    Condition: CreateResourcesProd
    Properties:
      CidrBlock: !Ref CidrNetwork
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: prod-VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateResourcesProd
    Properties:
      AvailabilityZone: !Select [0, !Ref AZs]
      VpcId: !Ref MyVPC
      CidrBlock: !Select [0, !Cidr [!Ref CidrNetwork, 4, 8] ]
      Tags:
        - Key: Name
          Value: prod-Public1-Subnet

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateResourcesProd
    Properties:
      AvailabilityZone: !Select [1, !Ref AZs]
      VpcId: !Ref MyVPC
      CidrBlock: !Select [1, !Cidr [!Ref CidrNetwork, 4, 8] ]
      Tags:
        - Key: Name
          Value: prod-Public2-Subnet

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateResourcesProd
    Properties:
      AvailabilityZone: !Select [0, !Ref AZs]
      VpcId: !Ref MyVPC
      CidrBlock: !Select [2, !Cidr [!Ref CidrNetwork, 4, 8] ]
      Tags:
        - Key: Name
          Value: prod-Private1-Subnet

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateResourcesProd
    Properties:
      AvailabilityZone: !Select [1, !Ref AZs]
      VpcId: !Ref MyVPC
      CidrBlock: !Select [3, !Cidr [!Ref CidrNetwork, 4, 8] ]
      Tags:
        - Key: Name
          Value: prod-Private2-Subnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateResourcesProd
    Properties:
      Tags:
        - Key: Name
          Value: prod-InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateResourcesProd
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  S3VPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Condition: CreateResourcesProd
    Properties:
      PrivateDnsEnabled: false
      RouteTableIds:
        - !Ref RouteTableNAT1
        - !Ref RouteTableNAT2
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref MyVPC

  DynamoVPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Condition: CreateResourcesProd
    Properties:
      PrivateDnsEnabled: false
      RouteTableIds:
        - !Ref RouteTableNAT1
        - !Ref RouteTableNAT2
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref MyVPC

  RouteTableGateway:
    Type: AWS::EC2::RouteTable
    Condition: CreateResourcesProd
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: prod-RouteTable-Gateway

  RouteTableGatewayAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateResourcesProd
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTableGateway

  RouteTableGatewayAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateResourcesProd
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTableGateway

  RouteGateway:
    Type: AWS::EC2::Route
    DependsOn: 
      - InternetGateway
      - RouteTableGateway
    Condition: CreateResourcesProd
    Properties:
      RouteTableId: !Ref RouteTableGateway
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  #NATs and NATs attachments
  NAT1:
   Type: AWS::EC2::NatGateway
   Condition: CreateResourcesProd
   Properties:
      AllocationId: !GetAtt EIPNAT1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: prod-NAT-1

  NAT2:
   Type: AWS::EC2::NatGateway
   Condition: CreateResourcesProd
   Properties:
      AllocationId: !GetAtt EIPNAT2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
      - Key: Name
        Value: prod-NAT-2

  EIPNAT1:
    Type: AWS::EC2::EIP
    Condition: CreateResourcesProd
    Properties:
      Domain: !Ref MyVPC

  EIPNAT2:
    Type: AWS::EC2::EIP
    Condition: CreateResourcesProd
    Properties:
      Domain: !Ref MyVPC

  RouteTableNAT1:
    Type: AWS::EC2::RouteTable
    Condition: CreateResourcesProd
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: prod-RouteTable1-NAT

  RouteTableNAT2:
    Type: AWS::EC2::RouteTable
    Condition: CreateResourcesProd
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: prod-RouteTable2-NAT

  RouteNAT1:
    Type: AWS::EC2::Route
    Condition: CreateResourcesProd
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT1
      RouteTableId: !Ref RouteTableNAT1

  RouteNAT2:
    Type: AWS::EC2::Route
    Condition: CreateResourcesProd
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT2
      RouteTableId: !Ref RouteTableNAT2

  AssociationNAT1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateResourcesProd
    Properties:
      RouteTableId: !Ref RouteTableNAT1
      SubnetId: !Ref PrivateSubnet1

  AssociationNAT2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateResourcesProd
    Properties:
      RouteTableId: !Ref RouteTableNAT2
      SubnetId: !Ref PrivateSubnet2

  PrivateACL:
    Type: "AWS::EC2::NetworkAcl"
    Condition: CreateResourcesProd
    Properties:
      Tags:
        - Key: Name
          Value: Private-ACL
      VpcId: !Ref MyVPC

  PublicACL:
    Type: "AWS::EC2::NetworkAcl"
    Condition: CreateResourcesProd
    Properties:
      Tags:
        - Key: Name
          Value: Public-ACL
      VpcId: !Ref MyVPC

  PublicHTTPACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: CreateResourcesProd
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PublicACL
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: Allow
      RuleNumber: 100

  PublicEntryACLOut:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: CreateResourcesProd
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId: !Ref PublicACL
      Protocol: -1
      RuleAction: Allow
      RuleNumber: 100

  PublicHTTPSACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: CreateResourcesProd
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PublicACL
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: Allow
      RuleNumber: 110

  EphemeralPortsEntryACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: CreateResourcesProd
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PublicACL
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: Allow
      RuleNumber: 120

  PrivateHTTPACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: CreateResourcesProd
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PrivateACL
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: Allow
      RuleNumber: 100

  PrivateEntryACLOut:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: CreateResourcesProd
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      NetworkAclId: !Ref PrivateACL
      Protocol: -1
      RuleAction: Allow
      RuleNumber: 100

  PrivateHTTPSACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: CreateResourcesProd
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PrivateACL
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: Allow
      RuleNumber: 120

  PrivateEphemeralPortsEntrySACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: CreateResourcesProd
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref PrivateACL
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: Allow
      RuleNumber: 130

  PublicACLAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Condition: CreateResourcesProd
     Properties:
       SubnetId: !Ref PublicSubnet1
       NetworkAclId: !Ref PublicACL

  PublicACLAssociation2:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Condition: CreateResourcesProd
     Properties:
       SubnetId: !Ref PublicSubnet2
       NetworkAclId: !Ref PublicACL

  PrivateACLAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Condition: CreateResourcesProd
     Properties:
       SubnetId: !Ref PrivateSubnet1
       NetworkAclId: !Ref PrivateACL

  PrivateACLAssociation2:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Condition: CreateResourcesProd
     Properties:
       SubnetId: !Ref PrivateSubnet2
       NetworkAclId: !Ref PrivateACL

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateResourcesProd
    Properties:
      GroupName: !Sub ${EnvironmentType}-Application-SecurityGroup
      GroupDescription: Access rules to application
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ElbSecurityGroup
          Description: Allows HTTP traffic from Load Balancer
        # - IpProtocol: tcp
        #   FromPort: 443
        #   ToPort: 443
        #   SourceSecurityGroupId: !Ref ElbSecurityGroup
        #   Description: Allows HTTPS traffic from Load Balancer

        # - IpProtocol: tcp
        #   FromPort: 8080
        #   ToPort: 8080
        #   SourceSecurityGroupId: !Ref ElbSecurityGroup
        #   Description: Allows port 8080 traffic from Load Balancer
      Tags:
        - Key: Name
          Value: Application-SG

  ElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateResourcesProd
    Properties:
      GroupName: !Sub ${EnvironmentType}-ELB-SecurityGroup
      GroupDescription: Access rules to load balancer
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allows HTTP traffic from everywhere
        # - IpProtocol: tcp
        #   FromPort: 443
        #   ToPort: 443
        #   CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp
        #   FromPort: 8080
        #   ToPort: 8080
        #   CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: LoadBalancer-SG






#  _____                 _             _             
# |  __ \               | |           (_)            
# | |  | | _____   _____| | ___  _ __  _ _ __   __ _ 
# | |  | |/ _ \ \ / / _ \ |/ _ \| '_ \| | '_ \ / _` |
# | |__| |  __/\ V /  __/ | (_) | |_) | | | | | (_| |
# |_____/ \___| \_/ \___|_|\___/| .__/|_|_| |_|\__, |
#                               | |             __/ |
#                               |_|            |___/ 

# From here, resources are created on a free-tier basis, used for testing and development.

  tMyVPC:
    Type: AWS::EC2::VPC
    Condition: CreateResourcesTest
    Properties:
      CidrBlock: !Ref CidrNetwork
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: tMyVPC

  tPublicSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateResourcesTest
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !Ref AZs]
      VpcId: !Ref tMyVPC
      CidrBlock: !Select [0, !Cidr [!Ref CidrNetwork, 2, 8] ]
      Tags:
        - Key: Name
          Value: Publica-1

  tPublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateResourcesTest
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !Ref AZs]
      VpcId: !Ref tMyVPC
      CidrBlock: !Select [1, !Cidr [!Ref CidrNetwork, 2, 8] ]
      Tags:
        - Key: Name
          Value: Publica-2

  tS3VPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Condition: CreateResourcesTest
    Properties:
      PrivateDnsEnabled: false
      RouteTableIds:
        - !Ref tRouteTableGateway
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref tMyVPC

  tDynamoVPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Condition: CreateResourcesTest
    Properties:
      PrivateDnsEnabled: false
      RouteTableIds:
        - !Ref tRouteTableGateway
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref tMyVPC

  tGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateResourcesTest
    Properties:
      Tags:
        - Key: Name
          Value: GatewayVPC

  tGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateResourcesTest
    Properties:
      InternetGatewayId:
        Ref: tGateway
      VpcId:
        Ref: tMyVPC

  tRouteTableGateway:
    Type: AWS::EC2::RouteTable
    Condition: CreateResourcesTest
    Properties:
      VpcId: !Ref tMyVPC
      Tags:
        - Key: Name
          Value: Tabela-Gateway

  tPublicSubnet1SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateResourcesTest
    Properties:
      RouteTableId: !Ref tRouteTableGateway
      SubnetId: !Ref tPublicSubnet1

  tPublicSubnet2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateResourcesTest
    Properties:
      RouteTableId: !Ref tRouteTableGateway
      SubnetId: !Ref tPublicSubnet2

  tGatewayRoute:
    Type: AWS::EC2::Route
    Condition: CreateResourcesTest
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref tGateway
      RouteTableId: !Ref tRouteTableGateway

  tPublicACL:
    Type: "AWS::EC2::NetworkAcl"
    Condition: CreateResourcesTest
    Properties:
      Tags:
        - Key: Name
          Value: Public-ACL
      VpcId: !Ref tMyVPC

  tPublicHTTPACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: CreateResourcesTest
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref tPublicACL
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: Allow
      RuleNumber: 100

  tPublicACLEntryOut:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: CreateResourcesTest
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      NetworkAclId: !Ref tPublicACL
      Protocol: -1
      RuleAction: Allow
      RuleNumber: 100

  tPublicHTTPSACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: CreateResourcesTest
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref tPublicACL
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: Allow
      RuleNumber: 110

  tEphemeralPortsEntryACL:
    Type: "AWS::EC2::NetworkAclEntry"
    Condition: CreateResourcesTest
    Properties:
      CidrBlock: 0.0.0.0/0
      NetworkAclId: !Ref tPublicACL
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: Allow
      RuleNumber: 120

  tPublicACLAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Condition: CreateResourcesTest
     Properties:
       SubnetId: !Ref tPublicSubnet1
       NetworkAclId: !Ref tPublicACL

  tPublicACLAssociation2:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Condition: CreateResourcesTest
     Properties:
       SubnetId: !Ref tPublicSubnet2
       NetworkAclId: !Ref tPublicACL

  tAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateResourcesTest
    Properties:
      GroupName: !Sub ${EnvironmentType}-Application-SecurityGroup
      GroupDescription: !Sub ${EnvironmentType}-Application-SecurityGroup
      VpcId: !Ref tMyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref tElbSecurityGroup
        # - IpProtocol: tcp
        #   FromPort: 443
        #   ToPort: 443
        #   SourceSecurityGroupId: !Ref tElbSecurityGroup
        # - IpProtocol: tcp
        #   FromPort: 8080
        #   ToPort: 8080
        #   SourceSecurityGroupId: !Ref tElbSecurityGroup
      Tags:
        - Key: Name
          Value: Application-SG

  tElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateResourcesTest
    Properties:
      GroupName: !Sub ${EnvironmentType}-ELB-SecurityGroup
      GroupDescription: !Sub ${EnvironmentType}-ELB-SecurityGroup
      VpcId: !Ref tMyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp
        #   FromPort: 443
        #   ToPort: 443
        #   CidrIp: 0.0.0.0/0
        # - IpProtocol: tcp
        #   FromPort: 8080
        #   ToPort: 8080
        #   CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: LoadBalancer-SG



          
#   ____        _               _       
#   / __ \      | |             | |      
#  | |  | |_   _| |_ _ __  _   _| |_ ___ 
#  | |  | | | | | __| '_ \| | | | __/ __|
#  | |__| | |_| | |_| |_) | |_| | |_\__ \
#   \____/ \__,_|\__| .__/ \__,_|\__|___/
#                   | |                  
#                   |_|                  
Outputs:
############################################### TEST OUTPUTS ###############################################
  tMyVPC:
    Value: !Ref tMyVPC
    Condition: CreateResourcesTest
    Export:
      Name: !Sub "${AWS::StackName}-${EnvironmentType}-MyVPC"

  tPublicSubnet1:
    Value: !Ref tPublicSubnet1
    Condition: CreateResourcesTest
    Export:
      Name: !Sub "${AWS::StackName}-${EnvironmentType}-Public-Subnet1"

  tPublicSubnet2:
    Value: !Ref tPublicSubnet2
    Condition: CreateResourcesTest
    Export:
      Name: !Sub "${AWS::StackName}-${EnvironmentType}-Public-Subnet2"

  tAppSecurityGroup:
    Value: !Ref tAppSecurityGroup
    Condition: CreateResourcesTest
    Export:
      Name: !Sub "${AWS::StackName}-AppSecurityGroup"

  tElbSecurityGroup:
    Value: !Ref tElbSecurityGroup
    Condition: CreateResourcesTest
    Export:
      Name: !Sub "${AWS::StackName}-ElbSecurityGroup"

############################################### PRODUCTION OUTPUTS ###############################################
  MyVPC:
    Value: !Ref MyVPC
    Condition: CreateResourcesProd
    Export:
      Name: !Sub "${AWS::StackName}-${EnvironmentType}-MyVPC"

  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Condition: CreateResourcesProd
    Export:
      Name: !Sub "${AWS::StackName}-${EnvironmentType}-Public-Subnet1"

  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Condition: CreateResourcesProd
    Export:
      Name: !Sub "${AWS::StackName}-${EnvironmentType}-Public-Subnet2"

  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Condition: CreateResourcesProd
    Export:
      Name: !Sub "${AWS::StackName}-${EnvironmentType}-Private-Subnet1"

  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Condition: CreateResourcesProd
    Export:
      Name: !Sub "${AWS::StackName}-${EnvironmentType}-Private-Subnet2"

  AppSecurityGroup:
    Value: !Ref AppSecurityGroup
    Condition: CreateResourcesProd
    Export:
      Name: !Sub "${AWS::StackName}-AppSecurityGroup"

  ElbSecurityGroup:
    Value: !Ref ElbSecurityGroup
    Condition: CreateResourcesProd
    Export:
      Name: !Sub "${AWS::StackName}-ElbSecurityGroup"